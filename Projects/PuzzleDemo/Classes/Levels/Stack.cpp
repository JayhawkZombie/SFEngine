#include "Stack.h"
#include "Physics\Collider.h"

BallStackLevel::BallStackLevel()
  : BasicLevel(sf::Vector2u(1700, 900), sf::FloatRect(0, 0, 1700, 900))
{
  if (!m_BGMusic.openFromFile("./Projects/PuzzleDemo/Assets/Sound/Castle-of-Despair.ogg")) {
    std::cerr << "Unable to load background music for PuzzleBall level" << std::endl;
  }
  if (m_TimeSlowDownBuffer.loadFromFile("./Projects/PuzzleDemo/Assets/Sound/109210__benboncan__slowdown.wav"))
    m_TimeSlowDownSound.setBuffer(m_TimeSlowDownBuffer);

  if (m_TimeSpeedUpBuffer.loadFromFile("./Projects/PuzzleDemo/Assets/Sound/123438__anomalous-underdog__slowdown-short-up.wav"))
    m_TimeSpeedUpSound.setBuffer(m_TimeSpeedUpBuffer);

  if (m_BallSpawnBuffer.loadFromFile("./Projects/PuzzleDemo/Assets/Sound/BallSpawn.ogg"))
    m_BallSpawnSound.setBuffer(m_BallSpawnBuffer);

  //m_GameMenu = std::make_shared<tgui::Gui>(*Engine::currentRenderWindow);
  m_MenuFont.loadFromFile("./Projects/TestProject/Fonts/Marvel-Regular.ttf");
  //m_GameMenu->setFont(m_MenuFont);

  m_PipeLeftWall = BuildSegmentMesh('n', sf::Vector2i(450 + 325, 0), sf::Vector2i(450 + 325, 400));
  m_PipeWallRight = BuildSegmentMesh('n', sf::Vector2i(1250 - 325, 0),   sf::Vector2i(1250 - 325,        400));
  m_PipeDropBlock = BuildSegmentMesh('n', sf::Vector2i(450  + 325, 400), sf::Vector2i(450  + 325 + 150,  400));
  Segments.push_back(m_PipeLeftWall);
  Segments.push_back(m_PipeWallRight);
  Segments.push_back(m_PipeDropBlock);

  m_BallKillerBolt = std::make_shared<LightningBolt>();

  AssignBoundaries(900, 1700);
  Gravity->x = 0;
  Gravity->y = 0.0f;

  SetGravity(Gravity);

  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(450,  0),   sf::Vector2i(450,       300))); //Left wall of resiv.
  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(1250, 0),   sf::Vector2i(1250,      300))); //Right wall of resiv.
  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(450,  300), sf::Vector2i(450 + 325, 400))); //Left sloped wall of resiv.
  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(1250, 300), sf::Vector2i(925,       400))); //Right sloped wall of resiv.
  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(450 + 300, 600), sf::Vector2i(450 + 300, 900)));
  Segments.push_back(BuildSegmentMesh('n', sf::Vector2i(450 + 500, 600), sf::Vector2i(450 + 500, 900)));

  m_BallKillerBolt->Spark({ 750, 600 }, { 950, 600 });
  m_BallKillerBolt->SetPosition({ 750, 600 });
  m_BallKillerBolt->SetSize({ 200, 50 });

  auto m_BoltCollider = Collider2D::CreatePolygonMesh(4, 300, 0, sf::Vector2f(950, 600), sf::Vector2f(0, 0), 0.01f, 0.0f, sf::Color::Transparent);
  //m_BoltCollider->SetCollisionCallback([this](std::weak_ptr<Engine::Collider2D> Collider) {this->CheckBallAndBolt(Collider); });
  m_BoltCollider->SetObjectPtr(m_BallKillerBolt.get());
  m_BallKillerBolt->AddCollider(m_BoltCollider);
  SpawnAutoGeneratedObject(m_BallKillerBolt, "BallKillerBolt");

  m_LevelTheme = std::make_shared<tgui::Theme>("./Projects/PuzzleDemo/Assets/UIThemes/TransparentGray.theme");

  m_QuitButton = m_LevelTheme->load("button");
  m_QuitButton->setSize({ 150, 35 });
  m_QuitButton->setPosition({ 775, 432.5 });
  m_QuitButton->setText("quit");
  m_QuitButton->connect("clicked", []() { LoadLevelByName("MainMenu"); });

  Gravity->x = 0.f;
  Gravity->y = 0.5f;
}

BallStackLevel::~BallStackLevel()
{
}

void BallStackLevel::TickUpdate(const double & delta)
{
  BasicLevel::TickUpdate(delta);

  static sf::Clock GUITimer;
  m_GameSequencer.TickUpdate(delta);
  m_UntimedSequencer.Update();

  for (auto & gem : m_ShatterGems)
      gem->TickUpdate(delta);

  //m_GameMenu->updateTime(GUITimer.restart());

  for (auto & m_ShatterGem : m_ShatterGems) {
    if (m_ShatterGem->IsDead()) {
      (m_ShatterGem->OnKilled());
    }
  }
  
  std::remove_if(m_ShatterGems.begin(), m_ShatterGems.end(), [](auto it) {return (*it).IsDead(); });
}

void BallStackLevel::Render(std::shared_ptr<sf::RenderTarget> Target)
{
}

void BallStackLevel::RenderOnTexture(std::shared_ptr<sf::RenderTexture> Texture)
{
  //m_GameMenu->draw();

  BasicLevel::RenderOnTexture(Texture);

  for (auto & seg : Segments)
    seg->draw(*Texture);

  for (auto & gem : m_ShatterGems)
    if (gem) gem->Render(Texture);
}

void BallStackLevel::OnShutDown()
{
}

void BallStackLevel::HandleInputEvent(const UserEvent & evnt)
{
  if (evnt.EventType == UserEventType::KeyboardPress) {
    std::cerr << "User pressed key! " << std::endl;
    if (evnt.IsButtonPressed(sf::Keyboard::Escape))
      if (m_Paused)
        HideMenu();
      else
        ShowMenu();
  }
  else if (!m_Paused) {
    if (evnt.EventType == UserEventType::MousePress)
      HandleUserClick(evnt.CurrentMousePosition);
  }
}

void BallStackLevel::EventUpdate(sf::Event event)
{
  //m_GameMenu->handleEvent(event);
}

void BallStackLevel::OnBegin()
{
  BasicLevel::OnBegin();
  Messager::PostToActivityLog(
    SystemMessage(SystemMessageType::ActivityLog, InternalID, 0, "StackLevel - OnBegin()")
  );

  SetGravity(Gravity);
  //m_GameMenu->add(m_PausePanel);
  m_BGMusic.play();
  m_GameSequencer.Start();
  SpawnGem(sf::Vector2f(835, 40));
  m_BallKillerBolt->Spark({ 750, 600 }, { 950, 600 });

  m_UntimedSequencer.AddSequences(
    []() {std::cerr << "Untimed seq starting" << std::endl; }, []() {std::cerr << "Untimed seq done" << std::endl; },
    {
      { 
        []() -> void { std::cerr << "Seq1 starting" << std::endl; }, 
        []() -> bool { return sf::Keyboard::isKeyPressed(sf::Keyboard::Return); }, 
        []() -> void { std::cerr << "Seq1 done" << std::endl; }
      },
      {
        []() -> void { std::cerr << "Seq2 starting" << std::endl; },
        []() -> bool { return sf::Keyboard::isKeyPressed(sf::Keyboard::E); },
        []() -> void { std::cerr << "Seq2 done" << std::endl; }
      }
    }
  );

  m_UntimedSequencer.Start();
}

void BallStackLevel::OnEnd()
{
  Messager::PostToActivityLog(
    SystemMessage(SystemMessageType::ActivityLog, InternalID, 0, "StackLevel - OnEnd()")
  );

  m_BGMusic.stop();
  LevelObjects.clear();
  m_ShatterGems.clear();
  m_BallKillerBolt->Reset();
  BasicLevel::OnEnd();
}

void BallStackLevel::ShowUI()
{
  GUI->add(m_QuitButton);
}

void BallStackLevel::HideUI()
{
  GUI->remove(m_QuitButton);
}

void BallStackLevel::Reset()
{
}

void BallStackLevel::UpdateObjectPhysics()
{
  BasicLevel::UpdateObjectPhysics();

  m_BallKillerBolt->Spark({ 750, 600 }, { 950, 600 });
}

std::string BallStackLevel::GetClass() const
{
  return std::string("BallStackLevel");
}

void BallStackLevel::HandleUserClick(sf::Vector2i Pos)
{

}

void BallStackLevel::CheckBallAndBolt(std::weak_ptr<Collider2D> Collider)
{
}

void BallStackLevel::LaunchBall()
{
}

void BallStackLevel::SpawnBall()
{
  std::shared_ptr<PuzzleBall> Ball = std::make_shared<PuzzleBall>();
  Ball->AddCollider(Collider2D::CreateCircularMesh(
    MeshType::Ball, sf::Vector2f(835, 40), sf::Vector2f(0, 0), 30, 3.f, 0.4f, sf::Color::Blue));
  SpawnAutoGeneratedObject(Ball, "PuzzleBall");
  m_CurrentBall = Ball;
}

void BallStackLevel::KillBall()
{
  m_CurrentBall.reset();
}

void BallStackLevel::SpawnGem(const sf::Vector2f & Pos)
{
  auto Gem = std::make_shared<ShatterGem>(Pos);
  m_ShatterGems.push_back(Gem);
  Gem->OnSpawn();

  SpawnAutoGeneratedObject(Gem, "ShatterGem");
}

void BallStackLevel::ShowMenu()
{
  m_Paused = true;
  m_QuitButton->enable();
  m_QuitButton->showWithEffect(tgui::ShowAnimationType::Fade, sf::milliseconds(250));
}

void BallStackLevel::HideMenu()
{
  m_Paused = false;
  m_QuitButton->disable();
  m_QuitButton->hideWithEffect(tgui::ShowAnimationType::Fade, sf::milliseconds(250));
}
